name: Release Pipeline

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+' # Trigger only when tag with version (e.g. 1.0.0) is pushed.
  workflow_dispatch:
    inputs:
      version:
        description: Version to release
        required: true

env:
  ENV: 'prod' # Environment should be static for each env's .yml file.
  APP_NAME: 'meltyframedatabot'
  LAMBDA_NAME: 'fgc-aacc-meltyframedatabot'

permissions:
  id-token: write # This is required for requesting the JWT
  contents: write # This is required for actions/checkout and tag creation

jobs:
  RunUnitTests:
    uses: ./.github/workflows/action_unit_test.yml

  SetupParameters:
    runs-on: ubuntu-latest
    outputs:
      env: ${{ steps.set_params.outputs.env }}
      filename: ${{ steps.set_params.outputs.filename }}
      lambda_name: ${{ steps.set_params.outputs.lambda_name }}
    steps:
      - name: Extract branch name
        id: extract_branch
        shell: bash
        run: |
          BRANCH=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          echo "Branch: $BRANCH"
      - name: Exit if not on main branch
        run: |
          if [ '${{ endsWith(steps.extract_branch.outputs.branch, 'main')}}' == 'false' ];
          then
            echo "Extracted branch: ${{steps.extract_branch.outputs.branch}}"
            echo "Branch ends with main: ${{ endsWith(steps.extract_branch.outputs.branch, 'main')}}"
            echo "Releases can only run for tags pushed to main branch"
            exit 1
          else
            echo "Tag pushed to main branch. Proceeding with deployment."
          fi
      - name: Set version
        id: set_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ];
          then
            VERSION=${{ inputs.version }}
            echo "Running from workflow_dispatch with input version: $VERSION"
          else
            VERSION=${{  github.ref_name }}
            echo "Run via push of new tag: $VERSION"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      # Setup parameters in job because you cannot directly pass variables into input.
      - name: Set parameters
        id: set_params
        # Obtain version from tag name for prod releases.
        run: |
          ENV=${{ env.ENV }}
          VERSION=${{  steps.set_version.outputs.version }}
          FILENAME=${{ env.APP_NAME }}-$VERSION-$ENV
          LAMBDA_NAME=${{ env.LAMBDA_NAME }}
          echo "env=$ENV" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "filename=$FILENAME" >> $GITHUB_OUTPUT
          echo "lambda_name=$LAMBDA_NAME" >> $GITHUB_OUTPUT

  Build:
    needs: [SetupParameters, RunUnitTests]
    uses: ./.github/workflows/action_build.yml
    with:
      env: ${{needs.SetupParameters.outputs.env}}
      filename: ${{needs.SetupParameters.outputs.filename}}
    secrets: inherit

  Deploy:
    needs: [SetupParameters, RunUnitTests, Build]
    uses: ./.github/workflows/action_deploy.yml
    with:
      env: ${{needs.SetupParameters.outputs.env}}
      filename: ${{ needs.SetupParameters.outputs.filename}}
      lambda_name: ${{ needs.SetupParameters.outputs.lambda_name}}
    secrets: inherit
